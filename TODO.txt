
# C Parser and C converter - Stage 0
  
    - [./] Support integer declaration. "int a = 0;"
	- [./] Support multiple integer declaration. "int a = 0, b = 1;"
	- [./] Support function definition. "int main() { return 0; }
	- [./] Suppprt function parameters. "int main(int a, int b) { return 0;}"
	- [./] Support forward function declaration. "int main(int a);
	- [./] Support other type char parameter.
	- [./] Support pointer parameters.
	- [./] Support array parameters.
	
# C Parser and C converter - Stage 1

    - [] Support pointer declaration.
    - [] Support array declaration.
	- [] Handle typedef.
	- [] Handle struct
	- [] Handle basic macro?

# Type check

    - Implement some type check with int8/int16/etc before introducing structure and enum?

# Augmented C
	- find a good iterator implementation for array, lists etc.
		- current idea:
		```
			iterator my_iterator(int begin, int end) { ... }
			for my_iterator(0, 100) -> x   // if there is no parenthesis after for an iterator is assumed to be used.
			for my_iterator(0, 100) -> y
			{ print(x, y); }
			// You can iterate built-in values
			int a[10];
			for a -> i { print(i); };
			int b;
			for b -> i { print(i); }; // even single values
			
			// You can also modify the context
			int c[10];
			foreach auto c = my_iterator() -> i { print(i); };
		```
	- add attributes.
	  ```
		#pragma AC [attribute_key = attribute_value, attribute_key2]
	  ```
	- add prefix to symbols to simulate namespace?
	- Create compile time evaluation with VM?
	- Think about how we can augment the C language with metaprogramming.
		- Serialize/deserialize some data.
		- Iterate over all types of a compilation unit.
		- Iterate over alls functions of a compilation unit.
		- Add members to a struct (for example to add debug info).
		- Remove members from type?
		- Insert code to functions at the end of at the begining.
		- Insert code before or after a function call.
	- iterate all the symbols in the project (check consistencies)
    - iterate all the literal strings in the project (wordspell check etc.)